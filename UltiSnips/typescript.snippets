snippet ctor "constructor(...) {" b
constructor($1) {
	$2
}
endsnippet

snippet pubfunc "public function(...): ... {" b
public $1($2): $3 {
	$4
}
endsnippet

snippet privfunc "private function(...): ... {" b
private $1($2): $3 {
	$4
}
endsnippet

snippet me "module.exports" b
module.exports = ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`};$0
endsnippet

snippet re "require" b
var `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet prom "return new Promise<...>((resolve, reject) => {" b
return new Promise<$1>((resolve, reject) => {
	$2
});
endsnippet

snippet c "const ... = ...;" b
const $1 = $2;
endsnippet

snippet l "let ... = ...;" b
let $1 = $2;
endsnippet

snippet showLoadingState "public async showLoadingState() {" b
private async showLoadingState() {
	this.loadingPopup = (await this.loadingCtrl.create());
	this.loadingPopup.present();
}
endsnippet

snippet dismissLoadingState "this.loadingPopup.dismiss()" b
	this.loadingPopup.dismiss();
endsnippet
